using Normal.Realtime.Serialization;
using Normal.Realtime;
using UnityEngine;

[RealtimeModel]
public partial class AvatarsSoundsModel
{

    [RealtimeProperty(1, true, true)] private bool _playGiantMove;
    [RealtimeProperty(2, true, true)] private bool _playSpriteJump;
    [RealtimeProperty(3, true, true)] private bool _playSpriteGlide;
    [RealtimeProperty(4, true, true)] private bool _playSpriteLand;
    [RealtimeProperty(5, true, true)] private bool _playGrab;

}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class AvatarsSoundsModel : RealtimeModel {
    public bool playGiantMove {
        get {
            return _playGiantMoveProperty.value;
        }
        set {
            if (_playGiantMoveProperty.value == value) return;
            _playGiantMoveProperty.value = value;
            InvalidateReliableLength();
            FirePlayGiantMoveDidChange(value);
        }
    }
    
    public bool playSpriteJump {
        get {
            return _playSpriteJumpProperty.value;
        }
        set {
            if (_playSpriteJumpProperty.value == value) return;
            _playSpriteJumpProperty.value = value;
            InvalidateReliableLength();
            FirePlaySpriteJumpDidChange(value);
        }
    }
    
    public bool playSpriteGlide {
        get {
            return _playSpriteGlideProperty.value;
        }
        set {
            if (_playSpriteGlideProperty.value == value) return;
            _playSpriteGlideProperty.value = value;
            InvalidateReliableLength();
            FirePlaySpriteGlideDidChange(value);
        }
    }
    
    public bool playSpriteLand {
        get {
            return _playSpriteLandProperty.value;
        }
        set {
            if (_playSpriteLandProperty.value == value) return;
            _playSpriteLandProperty.value = value;
            InvalidateReliableLength();
            FirePlaySpriteLandDidChange(value);
        }
    }
    
    public bool playGrab {
        get {
            return _playGrabProperty.value;
        }
        set {
            if (_playGrabProperty.value == value) return;
            _playGrabProperty.value = value;
            InvalidateReliableLength();
            FirePlayGrabDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(AvatarsSoundsModel model, T value);
    public event PropertyChangedHandler<bool> playGiantMoveDidChange;
    public event PropertyChangedHandler<bool> playSpriteJumpDidChange;
    public event PropertyChangedHandler<bool> playSpriteGlideDidChange;
    public event PropertyChangedHandler<bool> playSpriteLandDidChange;
    public event PropertyChangedHandler<bool> playGrabDidChange;
    
    public enum PropertyID : uint {
        PlayGiantMove = 1,
        PlaySpriteJump = 2,
        PlaySpriteGlide = 3,
        PlaySpriteLand = 4,
        PlayGrab = 5,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _playGiantMoveProperty;
    
    private ReliableProperty<bool> _playSpriteJumpProperty;
    
    private ReliableProperty<bool> _playSpriteGlideProperty;
    
    private ReliableProperty<bool> _playSpriteLandProperty;
    
    private ReliableProperty<bool> _playGrabProperty;
    
    #endregion
    
    public AvatarsSoundsModel() : base(null) {
        _playGiantMoveProperty = new ReliableProperty<bool>(1, _playGiantMove);
        _playSpriteJumpProperty = new ReliableProperty<bool>(2, _playSpriteJump);
        _playSpriteGlideProperty = new ReliableProperty<bool>(3, _playSpriteGlide);
        _playSpriteLandProperty = new ReliableProperty<bool>(4, _playSpriteLand);
        _playGrabProperty = new ReliableProperty<bool>(5, _playGrab);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _playGiantMoveProperty.UnsubscribeCallback();
        _playSpriteJumpProperty.UnsubscribeCallback();
        _playSpriteGlideProperty.UnsubscribeCallback();
        _playSpriteLandProperty.UnsubscribeCallback();
        _playGrabProperty.UnsubscribeCallback();
    }
    
    private void FirePlayGiantMoveDidChange(bool value) {
        try {
            playGiantMoveDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePlaySpriteJumpDidChange(bool value) {
        try {
            playSpriteJumpDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePlaySpriteGlideDidChange(bool value) {
        try {
            playSpriteGlideDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePlaySpriteLandDidChange(bool value) {
        try {
            playSpriteLandDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePlayGrabDidChange(bool value) {
        try {
            playGrabDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _playGiantMoveProperty.WriteLength(context);
        length += _playSpriteJumpProperty.WriteLength(context);
        length += _playSpriteGlideProperty.WriteLength(context);
        length += _playSpriteLandProperty.WriteLength(context);
        length += _playGrabProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _playGiantMoveProperty.Write(stream, context);
        writes |= _playSpriteJumpProperty.Write(stream, context);
        writes |= _playSpriteGlideProperty.Write(stream, context);
        writes |= _playSpriteLandProperty.Write(stream, context);
        writes |= _playGrabProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.PlayGiantMove: {
                    changed = _playGiantMoveProperty.Read(stream, context);
                    if (changed) FirePlayGiantMoveDidChange(playGiantMove);
                    break;
                }
                case (uint) PropertyID.PlaySpriteJump: {
                    changed = _playSpriteJumpProperty.Read(stream, context);
                    if (changed) FirePlaySpriteJumpDidChange(playSpriteJump);
                    break;
                }
                case (uint) PropertyID.PlaySpriteGlide: {
                    changed = _playSpriteGlideProperty.Read(stream, context);
                    if (changed) FirePlaySpriteGlideDidChange(playSpriteGlide);
                    break;
                }
                case (uint) PropertyID.PlaySpriteLand: {
                    changed = _playSpriteLandProperty.Read(stream, context);
                    if (changed) FirePlaySpriteLandDidChange(playSpriteLand);
                    break;
                }
                case (uint) PropertyID.PlayGrab: {
                    changed = _playGrabProperty.Read(stream, context);
                    if (changed) FirePlayGrabDidChange(playGrab);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _playGiantMove = playGiantMove;
        _playSpriteJump = playSpriteJump;
        _playSpriteGlide = playSpriteGlide;
        _playSpriteLand = playSpriteLand;
        _playGrab = playGrab;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
