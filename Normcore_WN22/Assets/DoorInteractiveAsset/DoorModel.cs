using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;
using Normal.Realtime;

[RealtimeModel]
public partial class DoorModel 
{
    [RealtimeProperty(1, false, true)] private bool _isDoorSliding;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class DoorModel : RealtimeModel {
    public bool isDoorSliding {
        get {
            return _isDoorSlidingProperty.value;
        }
        set {
            if (_isDoorSlidingProperty.value == value) return;
            _isDoorSlidingProperty.value = value;
            InvalidateUnreliableLength();
            FireIsDoorSlidingDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(DoorModel model, T value);
    public event PropertyChangedHandler<bool> isDoorSlidingDidChange;
    
    public enum PropertyID : uint {
        IsDoorSliding = 1,
    }
    
    #region Properties
    
    private UnreliableProperty<bool> _isDoorSlidingProperty;
    
    #endregion
    
    public DoorModel() : base(null) {
        _isDoorSlidingProperty = new UnreliableProperty<bool>(1, _isDoorSliding);
    }
    
    private void FireIsDoorSlidingDidChange(bool value) {
        try {
            isDoorSlidingDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _isDoorSlidingProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _isDoorSlidingProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.IsDoorSliding: {
                    changed = _isDoorSlidingProperty.Read(stream, context);
                    if (changed) FireIsDoorSlidingDidChange(isDoorSliding);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _isDoorSliding = isDoorSliding;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
